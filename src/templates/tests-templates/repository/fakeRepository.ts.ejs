/* eslint-disable @typescript-eslint/no-unused-vars */
import { v4 as uuid } from 'uuid';
import { typeorm } from '@seidor-cloud-produtos/lib-seidor-common';

import <%= props.nameCamelCaseUpperFirst %> from '../../../database/entities/<%= props.nameCamelCaseUpperFirst %>';
import { <%= props.nameCamelCaseUpperFirst %>Interface } from '../../../interfaces/<%= props.nameCamelCase %>';
import I<%= props.nameCamelCaseUpperFirst %>Repository from '../../../interfaces/repositories/I<%= props.nameCamelCaseUpperFirst %>Repository';

export default class Fake<%= props.nameCamelCaseUpperFirst %>Repository implements I<%= props.nameCamelCaseUpperFirst %>Repository {
    private array<%= props.nameCamelCaseUpperFirst %>: <%= props.nameCamelCaseUpperFirst %>[] = [];

    public async createAndSave(<%= props.nameCamelCase %>Data: <%= props.nameCamelCaseUpperFirst %>Interface): Promise<<%= props.nameCamelCaseUpperFirst %>> {
        if (!<%= props.nameCamelCase %>Data.id) {
            const <%= props.nameCamelCase %>Created = Object.assign(new <%= props.nameCamelCaseUpperFirst %>(), <%= props.nameCamelCase %>Data);
            <%= props.nameCamelCase %>Created.id = uuid();
            <%= props.nameCamelCase %>Created.active = true;
            <%= props.nameCamelCase %>Created.created_at = new Date();
            <%= props.nameCamelCase %>Created.updated_at = new Date();
            this.array<%= props.nameCamelCaseUpperFirst %>.push(<%= props.nameCamelCase %>Created);
            return <%= props.nameCamelCase %>Created;
        }

        const index = this.array<%= props.nameCamelCaseUpperFirst %>.findIndex(item => item.id === <%= props.nameCamelCase %>Data.id);

        this.array<%= props.nameCamelCaseUpperFirst %>[index] = {
            ...<%= props.nameCamelCase %>Data,
            updated_at: new Date(),
        } as <%= props.nameCamelCaseUpperFirst %>;

        return this.array<%= props.nameCamelCaseUpperFirst %>[index];
    }

    public async findById(id: string<% if (props.tenantid) { %>, tenantid: string<% }%>): Promise<<%= props.nameCamelCaseUpperFirst %> | undefined> {
        return this.array<%= props.nameCamelCaseUpperFirst %>.find(
            <%= props.nameCamelCase %> => <%= props.nameCamelCase %>.id === id <% if (props.tenantid) { %>&& <%= props.nameCamelCase %>.tenantid === tenantid,<% }%>
        );
    }

    public async getAllWithoutPagination(
        options: typeorm.OptionsTypeOrmGetAllWithoutPagination,
    ): Promise<<%= props.nameCamelCaseUpperFirst %>[]> {
        return this.array<%= props.nameCamelCaseUpperFirst %>.filter(<%= props.nameCamelCase %> => <%= props.nameCamelCase %>.tenantid === options.where.tenantid);
    }

    public async getAllWithPagination(
        options: typeorm.OptionsTypeOrmGetAllWithPagination,
    ): Promise<{ data: <%= props.nameCamelCaseUpperFirst %>[]; count: number }> {
        const array = this.array<%= props.nameCamelCaseUpperFirst %>.filter(<%= props.nameCamelCase %> => <%= props.nameCamelCase %>.tenantid === options.where.tenantid);

        return { data: array, count: array.length };
    }
}
