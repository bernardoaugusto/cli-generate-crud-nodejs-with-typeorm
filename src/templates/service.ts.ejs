import { inject, injectable } from 'tsyringe';
import {
    typeorm,
    error as libError,
} from '@seidor-cloud-produtos/lib-seidor-common';

import <%= props.nameCamelCaseUpperFirst %> from '../database/entities/<%= props.nameCamelCaseUpperFirst %>';
import { UserRequestInterface } from '../interfaces/metadata/RelationalWithoutTenantid';
import { <%= props.nameCamelCaseUpperFirst %>Interface, <%= props.nameCamelCaseUpperFirst %>RequestGetAllInterface } from '../interfaces/<%= props.nameCamelCase %>';
import I<%= props.nameCamelCaseUpperFirst %>Repository from '../interfaces/repositories/I<%= props.nameCamelCaseUpperFirst %>Repository';
import { PaginateResponseProperties } from '../interfaces/pagination';

@injectable()
export default class <%= props.nameCamelCaseUpperFirst %>Service {
    constructor(
        @inject('<%= props.nameCamelCaseUpperFirst %>Repository')
        private <%= props.nameCamelCase %>Repository: I<%= props.nameCamelCaseUpperFirst %>Repository,
    ) {}

    public async create(
        <%= props.nameCamelCase %>Data: <%= props.nameCamelCaseUpperFirst %>Interface,
        userRequestData: UserRequestInterface,
        <% if (props.tenantid) { %>tenantid: string,<% }%>
    ): Promise<<%= props.nameCamelCaseUpperFirst %>> {
        const builded<%= props.nameCamelCaseUpperFirst %> = typeorm.dynamicBuilders.buildCreateWithUser(<%= props.nameCamelCase %>Data, userRequestData<% if (props.tenantid) { %>, tenantid<% }%>);

        return this.<%= props.nameCamelCase %>Repository.createAndSave(builded<%= props.nameCamelCaseUpperFirst %>);
    }

    public async findById(id: string<% if (props.tenantid) { %>, tenantid: string<% }%>): Promise<<%= props.nameCamelCaseUpperFirst %>> {
        const finded<%= props.nameCamelCaseUpperFirst %> = await this.<%= props.nameCamelCase %>Repository.findById(id<% if (props.tenantid) { %>, tenantid<% }%>);

        if (!finded<%= props.nameCamelCaseUpperFirst %>) {
            throw new libError.HttpError(404, '<%= props.nameCamelCaseUpperFirst %> not found');
        }

        return finded<%= props.nameCamelCaseUpperFirst %>;
    }

    public async getAll(
        queryParams: <%= props.nameCamelCaseUpperFirst %>RequestGetAllInterface,
        withPagination: boolean,
        showInactive: boolean,
        <% if (props.tenantid) { %>tenantid: string,<% }%>
    ): Promise<
        | <%= props.nameCamelCaseUpperFirst %>[]
        | ({
              data: <%= props.nameCamelCaseUpperFirst %>[];
          } & PaginateResponseProperties)
    > {
        if (withPagination) {
            const options = typeorm.formatParamsToTypeOrmOptionsWithPaginate(
                queryParams,
                showInactive,
                <% if (props.tenantid) { %>tenantid,<% }%>
            );

            const array<%= props.nameCamelCaseUpperFirst %> = await this.<%= props.nameCamelCase %>Repository.getAllWithPagination(
                options,
            );

            return typeorm.formatPaginateDataToResponse(queryParams, array<%= props.nameCamelCaseUpperFirst %>);
        }

        const options = typeorm.formatParamsToTypeOrmOptionsWithoutPaginate(
            queryParams,
            showInactive,
            <% if (props.tenantid) { %>tenantid,<% }%>
        );

        return this.<%= props.nameCamelCase %>Repository.getAllWithoutPagination(options);
    }

    public async update(
        <%= props.nameCamelCase %>Id: string,
        <%= props.nameCamelCase %>DataUpdates: <%= props.nameCamelCaseUpperFirst %>Interface,
        userRequestData: UserRequestInterface,
        <% if (props.tenantid) { %>tenantid: string,<% }%>
    ): Promise<<%= props.nameCamelCaseUpperFirst %>> {
        const find<%= props.nameCamelCaseUpperFirst %> = await this.findById(<%= props.nameCamelCase %>Id<% if (props.tenantid) { %>, tenantid<% }%>);

        const updates = { ...find<%= props.nameCamelCaseUpperFirst %>, ...<%= props.nameCamelCase %>DataUpdates };

        const buildUpdate<%= props.nameCamelCaseUpperFirst %> = typeorm.dynamicBuilders.buildUpdateWithUser(
            updates,
            userRequestData,
            <%= props.nameCamelCase %>Id,
            <% if (props.tenantid) { %>tenantid,<% }%>
        );

        return this.<%= props.nameCamelCase %>Repository.createAndSave(buildUpdate<%= props.nameCamelCaseUpperFirst %>);
    }

    public async activation(
        userRequestData: UserRequestInterface,
        <%= props.nameCamelCase %>Id: string,
        <% if (props.tenantid) { %>tenantid: string,<% }%>
    ): Promise<<%= props.nameCamelCaseUpperFirst %>Interface> {
        await this.findById(<%= props.nameCamelCase %>Id<% if (props.tenantid) { %>, tenantid<% }%>);

        const buildInactivate<%= props.nameCamelCaseUpperFirst %> = typeorm.dynamicBuilders.buildActivationWithUser(
            userRequestData,
            <%= props.nameCamelCase %>Id,
            <% if (props.tenantid) { %>tenantid,<% }%>
        ) as <%= props.nameCamelCaseUpperFirst %>Interface;

        return this.<%= props.nameCamelCase %>Repository.createAndSave(buildInactivate<%= props.nameCamelCaseUpperFirst %>);
    }

    public async inactivation(
        userRequestData: UserRequestInterface,
        <%= props.nameCamelCase %>Id: string,
        <% if (props.tenantid) { %>tenantid: string,<% }%>
    ): Promise<<%= props.nameCamelCaseUpperFirst %>Interface> {
        await this.findById(<%= props.nameCamelCase %>Id<% if (props.tenantid) { %>, tenantid<% }%>);

        const buildInactivate<%= props.nameCamelCaseUpperFirst %> = typeorm.dynamicBuilders.buildInactivationWithUser(
            userRequestData,
            <%= props.nameCamelCase %>Id,
            <% if (props.tenantid) { %>tenantid,<% }%>
        ) as <%= props.nameCamelCaseUpperFirst %>Interface;

        return this.<%= props.nameCamelCase %>Repository.createAndSave(buildInactivate<%= props.nameCamelCaseUpperFirst %>);
    }
}
